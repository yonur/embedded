Konfigurasyon Parametreleri:
Bu parametreler birer macro(define)'dur. Tanım değerine göre FreeRTOS farklı konfigürasyona ayarlanabilmektedir.

configUSE_PREEMPTION -> Eğer 1 olarak tanımlanırsa preemptive RTOS scheduler, 0 olarak tanımlanırsa cooperative RTOS scheduler kullanılacaktır.

configUSE_PORT_OPTIMISED_TASK_SELECTION -> Bazı FreeRTOS portlarının bir sonraki task'ın çalışması için seçebileceği 2 method bulunmaktadır.
Bu methodlar, generic method ve bu porta özel olan methoddur. 
  Generic Method: 
    - configUSE_PORT_OPTIMISED_TASK_SELECTION 0 olarak ayarlandığında, yada bu porta özel method uygulanmadığında kullanılmaktadır.
    - bütün FreeRTOS portları ile kullanılabilmektedir.
    - bütünüyle C dilinde yazılmıştır, bu durum porta özel methoda göre daha az etkin olmasına neden olmaktadır.
    - erişilebilir priority'lerin sayısının belli bir üst limiti aşmamasına zorlamamaktadır.
  Porta özel method:
    - bütün portlar için erişilebilir değildir.
    - configUSE_PORT_OPTIMISED_TASK_SELECTION 1 olarak ayarlandığında kullanılır.
    - bir yada daha fazla mimariye özel assembly instruction'larına bağlıdır (tipik olarak Count Leading Zeros(CLZ) yada eşdeğer instruction)bundan dolayı özel olarak yazıldığı mimariyle birlikte kullanılabilmektedir.
    - generic method'dan daha etkindir.
    - Tipik olarak maksimum erişilebilir priority sayısı 32 ile sınırlı olmaya zorlanmaktadır.
  
 configUSE_TICKLESS_IDLE -> 'low power tickless mode' ile kullanılması için 1 olarak, yada tick interrupt çalışmayı devamlı çalıştırmak için 0 olarak
 ayarlanır.
 
 configUSE_IDLE_HOOK -> idle hook kullanılacaksa 1 olarak, bir idle hook' u ihmal etmek için ise 0 olarak ayarlanmaktadır.
 
 configUSE_MALLOC_FAILED_HOOK -> kernel, her task, queue yada semafor yaratıldığında heap'ten bir hafıza alanını pvPortMalloc() kullanarak tahsis eder.
 Bu amaçla FreeRTOS'un yüklendiğinde içerisinde bulunan 4 temel hafıza tahsis şeması vardır. heap_1.c, heap_2.c, heap_3.c, heap_4.c ve heap_5.c  kaynak dosyalarında uygulanan
 bu şemalar uygulanmaktadır. configUSE_MALLOC_FAILED_HOOK bu üç şema durumuna uygun olarak uygulanmaktadır.
 malloc() hook fonksiyonu uygulamada hata vermektedir ki bu durumda pvPortMalloc() NULL dönmektedir. NULL yalnızca geri kalan FreeRTOS hafızası 
 başarılı bir yer tahsisi için yetersiz kaldığında geri dönüş değeri olmaktadır.
 Eğer configUSE_MALLOC_FAILED_HOOK 1 olarak ayarlanırsa bir malloc() failed fonksiyonu tanımlanmalıdır. Eğer 0 olarak ayarlanmışsa tanımlanmış olsa bile 
 geri dönmez. Malloc() failed fook fonksiyonunun isimi ve prototip tanımı aşağıda gösterilmiştir.
  void vApplicationMallocFailedHook( void );
 
 configUSE_DAEMON_TASK_STARTUP_HOOK -> Eğer configUSE_TIMERS ve configUSE_DAEMON_TASK_STARTUP_HOOK'nun her ikisi de 1 olarak ayarlanmışsa
 aşağıda gösterildiği şekilde bir isme ve prototipe sahip bir hook fonksiyonu tanımlanmalıdır. Hook fonksiyonu RTOS deamon task(timer servis task' da denilmektedir) 
 ilk defa çalıştığında tam olarak 1 kere çağırılmalıdır. 
